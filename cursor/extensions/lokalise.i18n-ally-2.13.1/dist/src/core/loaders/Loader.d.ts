import { Disposable, EventEmitter } from 'vscode';
import { LocaleTree, LocaleNode, LocaleRecord, FlattenLocaleTree } from '../Nodes';
import { Coverage, FileInfo, PendingWrite, NodeOptions, RewriteKeySource, RewriteKeyContext, DataProcessContext } from '../types';
export declare abstract class Loader extends Disposable {
    readonly name: string;
    protected _disposables: Disposable[];
    protected _onDidChange: EventEmitter<string>;
    readonly onDidChange: import("vscode").Event<string>;
    protected _flattenLocaleTree: FlattenLocaleTree;
    protected _localeTree: LocaleTree;
    constructor(name: string);
    abstract get locales(): string[];
    get root(): LocaleTree;
    get flattenLocaleTree(): FlattenLocaleTree;
    get files(): FileInfo[];
    get keys(): string[];
    getCoverage(locale: string, keys?: string[]): Coverage | undefined;
    protected updateTree(tree: LocaleTree | undefined, data: any, keypath: string, keyname: string, options: NodeOptions, isCollection?: boolean): LocaleTree;
    rewriteKeys(key: string, source: RewriteKeySource, context?: RewriteKeyContext): string;
    preprocessData(data: object, context?: DataProcessContext): object;
    deprocessData(data: object, context?: DataProcessContext): object;
    getTreeNodeByKey(key: string, tree?: LocaleTree): LocaleNode | LocaleTree | undefined;
    getFilepathByKey(key: string, locale?: string): string | undefined;
    getNamespaceFromFilepath(filepath: string): string | undefined;
    private stripAnnotationString;
    private treeNodeValueHasPluralizationKeys;
    private firstPluralizationKey;
    private firstPluralizationKeyValue;
    getValueByKey(key: string, locale?: string, maxlength?: number, stringifySpace?: number, context?: RewriteKeyContext): string | undefined;
    getShadowNodeByKey(key: string): LocaleNode;
    getNodeByKey(key: string, shadow?: boolean, locale?: string): LocaleNode | undefined;
    getTranslationsByKey(key: string, shadow?: boolean, locale?: string): Record<string, LocaleRecord>;
    getRecordByKey(key: string, locale: string, shadow?: boolean): LocaleRecord | undefined;
    getShadowLocales(node: LocaleNode, listedLocales?: string[]): Record<string, LocaleRecord>;
    abstract write(pendings: PendingWrite | PendingWrite[]): Promise<void>;
    canHandleWrites(pending: PendingWrite): boolean;
    searchKeyForTranslations(text: string, locale?: string): string | undefined;
    protected onDispose(): void;
}
