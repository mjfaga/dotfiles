import { __assign } from "tslib";
import { PluginType } from '@amplitude/analytics-types';
import { UUID } from '@amplitude/analytics-core';
import { VERSION } from '../version';
var Context = /** @class */ (function () {
    function Context() {
        this.name = 'context';
        this.type = PluginType.BEFORE;
        this.eventId = 0;
        this.library = "amplitude-node-ts/".concat(VERSION);
    }
    Context.prototype.setup = function (config) {
        this.config = config;
        return Promise.resolve(undefined);
    };
    Context.prototype.execute = function (context) {
        var _this = this;
        return new Promise(function (resolve) {
            var time = new Date().getTime();
            var contextEvent = __assign(__assign(__assign({ time: time, insert_id: UUID(), plan: _this.config.plan }, (_this.config.ingestionMetadata && {
                ingestion_metadata: {
                    source_name: _this.config.ingestionMetadata.sourceName,
                    source_version: _this.config.ingestionMetadata.sourceVersion,
                },
            })), context), { event_id: _this.eventId++, library: _this.library });
            return resolve(contextEvent);
        });
    };
    return Context;
}());
export { Context };
//# sourceMappingURL=context.js.map