import { __assign, __awaiter, __extends, __generator } from "tslib";
import { AmplitudeCore, Destination, returnWrapper, debugWrapper, getClientLogConfig, getClientStates, } from '@amplitude/analytics-core';
import { Context } from './plugins/context';
import { useNodeConfig } from './config';
var AmplitudeNode = /** @class */ (function (_super) {
    __extends(AmplitudeNode, _super);
    function AmplitudeNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AmplitudeNode.prototype.init = function (apiKey, options) {
        if (apiKey === void 0) { apiKey = ''; }
        return returnWrapper(this._init(__assign(__assign({}, options), { apiKey: apiKey })));
    };
    AmplitudeNode.prototype._init = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var nodeOptions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Step 0: Block concurrent initialization
                        if (this.initializing) {
                            return [2 /*return*/];
                        }
                        this.initializing = true;
                        nodeOptions = useNodeConfig(options.apiKey, __assign({}, options));
                        return [4 /*yield*/, _super.prototype._init.call(this, nodeOptions)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.add(new Destination()).promise];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.add(new Context()).promise];
                    case 3:
                        _a.sent();
                        this.initializing = false;
                        return [4 /*yield*/, this.runQueuedFunctions('dispatchQ')];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return AmplitudeNode;
}(AmplitudeCore));
export { AmplitudeNode };
export var createInstance = function () {
    var client = new AmplitudeNode();
    return {
        init: debugWrapper(client.init.bind(client), 'init', getClientLogConfig(client), getClientStates(client, ['config'])),
        add: debugWrapper(client.add.bind(client), 'add', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.plugins'])),
        remove: debugWrapper(client.remove.bind(client), 'remove', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.plugins'])),
        track: debugWrapper(client.track.bind(client), 'track', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.queue.length'])),
        logEvent: debugWrapper(client.logEvent.bind(client), 'logEvent', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.queue.length'])),
        identify: debugWrapper(client.identify.bind(client), 'identify', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.queue.length'])),
        groupIdentify: debugWrapper(client.groupIdentify.bind(client), 'groupIdentify', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.queue.length'])),
        setGroup: debugWrapper(client.setGroup.bind(client), 'setGroup', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.queue.length'])),
        revenue: debugWrapper(client.revenue.bind(client), 'revenue', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.queue.length'])),
        flush: debugWrapper(client.flush.bind(client), 'flush', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.queue.length'])),
        setOptOut: debugWrapper(client.setOptOut.bind(client), 'setOptOut', getClientLogConfig(client), getClientStates(client, ['config'])),
    };
};
export default createInstance();
//# sourceMappingURL=node-client.js.map