import { __extends } from "tslib";
import { BaseTransport } from '@amplitude/analytics-core';
import * as http from 'http';
import * as https from 'https';
var Http = /** @class */ (function (_super) {
    __extends(Http, _super);
    function Http() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Http.prototype.send = function (serverUrl, payload) {
        var _this = this;
        var protocol;
        if (serverUrl.startsWith('http://')) {
            protocol = http;
        }
        else if (serverUrl.startsWith('https://')) {
            protocol = https;
        }
        else {
            throw new Error('Invalid server url');
        }
        var url = new URL(serverUrl);
        var requestPayload = JSON.stringify(payload);
        var options = {
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(requestPayload),
            },
            hostname: url.hostname,
            method: 'POST',
            path: url.pathname,
            port: url.port,
            protocol: url.protocol,
        };
        return new Promise(function (resolve) {
            var req = protocol.request(options, function (res) {
                res.setEncoding('utf8');
                var responsePayload = '';
                res.on('data', function (chunk) {
                    responsePayload += chunk;
                });
                res.on('end', function () {
                    if (res.complete && responsePayload.length > 0) {
                        try {
                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                            var parsedResponsePayload = JSON.parse(responsePayload);
                            var result = _this.buildResponse(parsedResponsePayload);
                            resolve(result);
                            return;
                        }
                        catch (_a) {
                            resolve(null);
                        }
                    }
                });
            });
            req.on('error', function () { return resolve(null); });
            req.end(requestPayload);
        });
    };
    return Http;
}(BaseTransport));
export { Http };
//# sourceMappingURL=http.js.map