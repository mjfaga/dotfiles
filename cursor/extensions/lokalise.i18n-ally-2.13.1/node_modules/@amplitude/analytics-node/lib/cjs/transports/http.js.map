{"version":3,"file":"http.js","sourceRoot":"","sources":["../../../src/transports/http.ts"],"names":[],"mappings":";;;AACA,4DAA0D;AAC1D,2BAA6B;AAC7B,6BAA+B;AAE/B;IAA0B,gCAAa;IAAvC;;IAkDA,CAAC;IAjDC,mBAAI,GAAJ,UAAK,SAAiB,EAAE,OAAgB;QAAxC,iBAgDC;QA/CC,IAAI,QAAoC,CAAC;QACzC,IAAI,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;YACnC,QAAQ,GAAG,IAAI,CAAC;SACjB;aAAM,IAAI,SAAS,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;YAC3C,QAAQ,GAAG,KAAK,CAAC;SAClB;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;SACvC;QAED,IAAM,GAAG,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC;QAC/B,IAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC/C,IAAM,OAAO,GAAG;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,gBAAgB,EAAE,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC;aACpD;YACD,QAAQ,EAAE,GAAG,CAAC,QAAQ;YACtB,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,GAAG,CAAC,QAAQ;YAClB,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,QAAQ,EAAE,GAAG,CAAC,QAAQ;SACvB,CAAC;QACF,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO;YACzB,IAAM,GAAG,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,UAAC,GAAG;gBACxC,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBACxB,IAAI,eAAe,GAAG,EAAE,CAAC;gBACzB,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,KAAa;oBAC3B,eAAe,IAAI,KAAK,CAAC;gBAC3B,CAAC,CAAC,CAAC;gBAEH,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE;oBACZ,IAAI,GAAG,CAAC,QAAQ,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC9C,IAAI;4BACF,mEAAmE;4BACnE,IAAM,qBAAqB,GAAwB,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;4BAC/E,IAAM,MAAM,GAAG,KAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;4BACzD,OAAO,CAAC,MAAM,CAAC,CAAC;4BAChB,OAAO;yBACR;wBAAC,WAAM;4BACN,OAAO,CAAC,IAAI,CAAC,CAAC;yBACf;qBACF;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YACH,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,cAAM,OAAA,OAAO,CAAC,IAAI,CAAC,EAAb,CAAa,CAAC,CAAC;YACrC,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC;IACH,WAAC;AAAD,CAAC,AAlDD,CAA0B,8BAAa,GAkDtC;AAlDY,oBAAI","sourcesContent":["import { Payload, Response, Transport } from '@amplitude/analytics-types';\nimport { BaseTransport } from '@amplitude/analytics-core';\nimport * as http from 'http';\nimport * as https from 'https';\n\nexport class Http extends BaseTransport implements Transport {\n  send(serverUrl: string, payload: Payload): Promise<Response | null> {\n    let protocol: typeof http | typeof https;\n    if (serverUrl.startsWith('http://')) {\n      protocol = http;\n    } else if (serverUrl.startsWith('https://')) {\n      protocol = https;\n    } else {\n      throw new Error('Invalid server url');\n    }\n\n    const url = new URL(serverUrl);\n    const requestPayload = JSON.stringify(payload);\n    const options = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Content-Length': Buffer.byteLength(requestPayload),\n      },\n      hostname: url.hostname,\n      method: 'POST',\n      path: url.pathname,\n      port: url.port,\n      protocol: url.protocol,\n    };\n    return new Promise((resolve) => {\n      const req = protocol.request(options, (res) => {\n        res.setEncoding('utf8');\n        let responsePayload = '';\n        res.on('data', (chunk: string) => {\n          responsePayload += chunk;\n        });\n\n        res.on('end', () => {\n          if (res.complete && responsePayload.length > 0) {\n            try {\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n              const parsedResponsePayload: Record<string, any> = JSON.parse(responsePayload);\n              const result = this.buildResponse(parsedResponsePayload);\n              resolve(result);\n              return;\n            } catch {\n              resolve(null);\n            }\n          }\n        });\n      });\n      req.on('error', () => resolve(null));\n      req.end(requestPayload);\n    });\n  }\n}\n"]}