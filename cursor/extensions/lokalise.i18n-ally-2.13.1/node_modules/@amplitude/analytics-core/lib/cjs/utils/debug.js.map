{"version":3,"file":"debug.js","sourceRoot":"","sources":["../../../src/utils/debug.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { LogLevel, LogConfig, DebugContext } from '@amplitude/analytics-types';\nimport { AmplitudeCore } from '../core-client';\n\nexport const getStacktrace = (ignoreDepth = 0): string[] => {\n  const trace = new Error().stack || '';\n  return trace\n    .split('\\n')\n    .slice(2 + ignoreDepth)\n    .map((text) => text.trim());\n};\n\n// This hook makes sure we always get the latest logger and logLevel.\nexport const getClientLogConfig = (client: AmplitudeCore) => (): LogConfig => {\n  const { loggerProvider: logger, logLevel } = { ...client.config };\n  return {\n    logger,\n    logLevel,\n  };\n};\n\n// This is a convenient function to get the attribute from object with string path, similar to lodash '#get'.\nexport const getValueByStringPath = (obj: any, path: string): any => {\n  path = path.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties\n  path = path.replace(/^\\./, ''); // strip a leading dot\n  for (const attr of path.split('.')) {\n    if (attr in obj) {\n      obj = obj[attr];\n    } else {\n      return;\n    }\n  }\n  return obj;\n};\n\nexport const getClientStates = (client: AmplitudeCore, paths: Array<string>) => (): { [key: string]: any } => {\n  const res: { [key: string]: any } = {};\n  for (const path of paths) {\n    res[path] = getValueByStringPath(client, path);\n  }\n  return res;\n};\n\nexport const debugWrapper =\n  <T extends Array<any>, R>(\n    fn: (...args: T) => R,\n    fnName: string,\n    getLogConfig: () => LogConfig,\n    getStates?: () => { [key: string]: any },\n    fnContext: any = null,\n  ) =>\n  (...args: T): R => {\n    const { logger, logLevel } = getLogConfig();\n    // return early if possible to reduce overhead\n    if ((logLevel && logLevel < LogLevel.Debug) || !logLevel || !logger) {\n      return fn.apply(fnContext, args);\n    }\n    const debugContext: DebugContext = {\n      type: 'invoke public method',\n      name: fnName,\n      args,\n      stacktrace: getStacktrace(1),\n      time: {\n        start: new Date().toISOString(),\n      },\n      states: {},\n    };\n    if (getStates && debugContext.states) {\n      debugContext.states.before = getStates();\n    }\n    const result = fn.apply(fnContext, args);\n    if (result && (result as any).promise) {\n      // if result is a promise, add the callback\n      (result as any).promise.then(() => {\n        if (getStates && debugContext.states) {\n          debugContext.states.after = getStates();\n        }\n        if (debugContext.time) {\n          debugContext.time.end = new Date().toISOString();\n        }\n        logger.debug(JSON.stringify(debugContext, null, 2));\n      });\n    } else {\n      if (getStates && debugContext.states) {\n        debugContext.states.after = getStates();\n      }\n      if (debugContext.time) {\n        debugContext.time.end = new Date().toISOString();\n      }\n      logger.debug(JSON.stringify(debugContext, null, 2));\n    }\n    return result;\n  };\n"]}