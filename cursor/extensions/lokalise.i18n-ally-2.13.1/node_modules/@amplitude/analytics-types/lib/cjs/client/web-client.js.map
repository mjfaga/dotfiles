{"version":3,"file":"web-client.js","sourceRoot":"","sources":["../../../src/client/web-client.ts"],"names":[],"mappings":"","sourcesContent":["import { AmplitudeReturn } from '../amplitude-promise';\nimport { BrowserConfig, BrowserOptions, ReactNativeConfig, ReactNativeOptions } from '../config';\nimport { TransportType } from '../transport';\nimport { CoreClient } from './core-client';\nimport { Plugin } from '../plugin';\n\ninterface Client extends CoreClient {\n  /**\n   * Returns current user ID.\n   *\n   * ```typescript\n   * const userId = getUserId();\n   * ```\n   */\n  getUserId(): string | undefined;\n\n  /**\n   * Sets a new user ID.\n   *\n   * ```typescript\n   * setUserId('userId');\n   * ```\n   */\n  setUserId(userId: string | undefined): void;\n\n  /**\n   * Returns current device ID.\n   *\n   * ```typescript\n   * const deviceId = getDeviceId();\n   * ```\n   */\n  getDeviceId(): string | undefined;\n\n  /**\n   * Sets a new device ID.\n   * When setting a custom device ID, make sure the value is sufficiently unique.\n   * A uuid is recommended.\n   *\n   * ```typescript\n   * setDeviceId('deviceId');\n   * ```\n   */\n  setDeviceId(deviceId: string): void;\n\n  /**\n   * Returns current session ID.\n   *\n   * ```typescript\n   * const sessionId = getSessionId();\n   * ```\n   */\n  getSessionId(): number | undefined;\n\n  /**\n   * Sets a new session ID.\n   * When setting a custom session ID, make sure the value is in milliseconds since epoch (Unix Timestamp).\n   *\n   * ```typescript\n   * setSessionId(Date.now());\n   * ```\n   */\n  setSessionId(sessionId: number): void;\n\n  /**\n   * Extends the current session (advanced)\n   *\n   * Normally sessions are extended automatically by track()'ing events. If you want to extend the session without\n   * tracking and event, this will set the last user interaction to the current time.\n   *\n   * ```typescript\n   * extendSession();\n   * ```\n   */\n  extendSession(): void;\n\n  /**\n   * Anonymizes users after they log out, by:\n   *\n   * * setting userId to undefined\n   * * setting deviceId to a new uuid value\n   *\n   * With an undefined userId and a completely new deviceId, the current user would appear as a brand new user in dashboard.\n   *\n   * ```typescript\n   * import { reset } from '@amplitude/analytics-browser';\n   *\n   * reset();\n   * ```\n   */\n  reset(): void;\n}\n\nexport interface BrowserClient extends Client {\n  /**\n   * Initializes the Amplitude SDK with your apiKey, optional configurations.\n   * This method must be called before any other operations.\n   *\n   * ```typescript\n   * await init(API_KEY, options).promise;\n   * ```\n   */\n  init(apiKey: string, userId?: string, options?: BrowserOptions): AmplitudeReturn<void>;\n\n  /**\n   * Sets the network transport type for events.\n   *\n   * ```typescript\n   * // Use Fetch API\n   * setTransport('fetch');\n   *\n   * // Use XMLHttpRequest API\n   * setTransport('xhr');\n   *\n   * // Use navigator.sendBeacon API\n   * setTransport('beacon');\n   * ```\n   */\n  setTransport(transport: TransportType): void;\n\n  /**\n   * Adds a new plugin.\n   *\n   * ```typescript\n   * const plugin = {\n   *   name: 'my-plugin',\n   *   type: 'enrichment',\n   *   async setup(config: BrowserConfig, amplitude: BrowserClient) {\n   *     return;\n   *   },\n   *   async execute(event: Event) {\n   *     return event;\n   *   },\n   * };\n   * amplitude.add(plugin);\n   * ```\n   */\n  add(plugin: Plugin<BrowserClient, BrowserConfig>): AmplitudeReturn<void>;\n}\n\nexport interface ReactNativeClient extends Client {\n  /**\n   * Initializes the Amplitude SDK with your apiKey, optional configurations.\n   * This method must be called before any other operations.\n   *\n   * ```typescript\n   * await init(API_KEY, options).promise;\n   * ```\n   */\n  init(apiKey: string, userId?: string, options?: ReactNativeOptions): AmplitudeReturn<void>;\n\n  /**\n   * Adds a new plugin.\n   *\n   * ```typescript\n   * const plugin = {\n   *   name: 'my-plugin',\n   *   type: 'enrichment',\n   *   async setup(config: ReactNativeConfig, amplitude: ReactNativeClient) {\n   *     return;\n   *   },\n   *   async execute(event: Event) {\n   *     return event;\n   *   },\n   * };\n   * amplitude.add(plugin);\n   * ```\n   */\n  add(plugin: Plugin<ReactNativeClient, ReactNativeConfig>): AmplitudeReturn<void>;\n}\n"]}