{"version":3,"file":"plugin.js","sourceRoot":"","sources":["../../src/plugin.ts"],"names":[],"mappings":";;AAKA,IAAY,UAIX;AAJD,WAAY,UAAU;IACpB,+BAAiB,CAAA;IACjB,uCAAyB,CAAA;IACzB,yCAA2B,CAAA;AAC7B,CAAC,EAJW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAIrB","sourcesContent":["import { Event } from './event';\nimport { Config } from './config';\nimport { Result } from './result';\nimport { CoreClient } from './client/core-client';\n\nexport enum PluginType {\n  BEFORE = 'before',\n  ENRICHMENT = 'enrichment',\n  DESTINATION = 'destination',\n}\n\nexport interface BeforePlugin<T = CoreClient, U = Config> {\n  name: string;\n  type: PluginType.BEFORE | 'before';\n  setup(config: U, client?: T): Promise<void>;\n  execute(context: Event): Promise<Event | null>;\n  teardown?(): Promise<void>;\n}\n\nexport interface EnrichmentPlugin<T = CoreClient, U = Config> {\n  name: string;\n  type: PluginType.ENRICHMENT | 'enrichment';\n  setup(config: U, client?: T): Promise<void>;\n  execute(context: Event): Promise<Event | null>;\n  teardown?(): Promise<void>;\n}\n\nexport interface DestinationPlugin<T = CoreClient, U = Config> {\n  name: string;\n  type: PluginType.DESTINATION | 'destination';\n  setup(config: U, client?: T): Promise<void>;\n  execute(context: Event): Promise<Result>;\n  flush?(): Promise<void>;\n  teardown?(): Promise<void>;\n}\n\nexport type Plugin<T = CoreClient, U = Config> = BeforePlugin<T, U> | EnrichmentPlugin<T, U> | DestinationPlugin<T, U>;\n"]}