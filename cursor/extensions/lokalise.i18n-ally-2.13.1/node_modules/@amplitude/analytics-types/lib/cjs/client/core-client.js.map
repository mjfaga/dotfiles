{"version":3,"file":"core-client.js","sourceRoot":"","sources":["../../../src/client/core-client.ts"],"names":[],"mappings":"","sourcesContent":["// import { Config } from '../config';\nimport { AmplitudeReturn } from '../amplitude-promise';\nimport { BaseEvent, EventOptions } from '../base-event';\nimport { Identify, Revenue } from '../event';\nimport { Plugin } from '../plugin';\nimport { Result } from '../result';\n\nexport interface CoreClient {\n  /**\n   * Adds a new plugin.\n   *\n   * ```typescript\n   * const plugin = {\n   *   name: 'myPlugin',\n   *   type: PluginType.ENRICHMENT,\n   *   setup(config: Config) {\n   *     return;\n   *   },\n   *   execute(context: Event) {\n   *     return context;\n   *   },\n   * };\n   * amplitude.add(plugin);\n   * ```\n   */\n  add(plugin: Plugin): AmplitudeReturn<void>;\n\n  /**\n   * Removes a plugin.\n   *\n   * ```typescript\n   * amplitude.remove('myPlugin');\n   * ```\n   */\n  remove(pluginName: string): AmplitudeReturn<void>;\n\n  /**\n   * Tracks user-defined event, with specified type, optional event properties and optional overwrites.\n   *\n   * ```typescript\n   * // event tracking with event type only\n   * track('Page Load');\n   *\n   * // event tracking with event type and additional event properties\n   * track('Page Load', { loadTime: 1000 });\n   *\n   * // event tracking with event type, additional event properties, and overwritten event options\n   * track('Page Load', { loadTime: 1000 }, { sessionId: -1 });\n   *\n   * // alternatively, this tracking method is awaitable\n   * const result = await track('Page Load').promise;\n   * console.log(result.event); // {...}\n   * console.log(result.code); // 200\n   * console.log(result.message); // \"Event tracked successfully\"\n   * ```\n   */\n  track(\n    eventInput: BaseEvent | string,\n    eventProperties?: Record<string, any>,\n    eventOptions?: EventOptions,\n  ): AmplitudeReturn<Result>;\n\n  /**\n   * Alias for track()\n   */\n  logEvent(\n    eventInput: BaseEvent | string,\n    eventProperties?: Record<string, any>,\n    eventOptions?: EventOptions,\n  ): AmplitudeReturn<Result>;\n\n  /**\n   * Sends an identify event containing user property operations\n   *\n   * ```typescript\n   * const id = new Identify();\n   * id.set('colors', ['rose', 'gold']);\n   * identify(id);\n   *\n   * // alternatively, this tracking method is awaitable\n   * const result = await identify(id).promise;\n   * console.log(result.event); // {...}\n   * console.log(result.code); // 200\n   * console.log(result.message); // \"Event tracked successfully\"\n   * ```\n   */\n  identify(identify: Identify, eventOptions?: EventOptions): AmplitudeReturn<Result>;\n\n  /**\n   * Sends a group identify event containing group property operations.\n   *\n   * ```typescript\n   * const id = new Identify();\n   * id.set('skills', ['js', 'ts']);\n   * const groupType = 'org';\n   * const groupName = 'engineering';\n   * groupIdentify(groupType, groupName, id);\n   *\n   * // alternatively, this tracking method is awaitable\n   * const result = await groupIdentify(groupType, groupName, id).promise;\n   * console.log(result.event); // {...}\n   * console.log(result.code); // 200\n   * console.log(result.message); // \"Event tracked successfully\"\n   * ```\n   */\n  groupIdentify(\n    groupType: string,\n    groupName: string | string[],\n    identify: Identify,\n    eventOptions?: EventOptions,\n  ): AmplitudeReturn<Result>;\n\n  /**\n   * Assigns a user to group\n   *\n   * ```typescript\n   * const groupType = 'orgId';\n   * const groupName = '15';\n   * setGroup(groupType, groupName, { user_id: '12345' })\n   * ```\n   */\n  setGroup(groupType: string, groupName: string | string[], eventOptions?: EventOptions): AmplitudeReturn<Result>;\n\n  /**\n   * Sends a revenue event containing revenue property operations.\n   *\n   * ```typescript\n   * const rev = new Revenue();\n   * rev.setRevenue(100);\n   * revenue(rev);\n   *\n   * // alternatively, this tracking method is awaitable\n   * const result = await revenue(rev).promise;\n   * console.log(result.event); // {...}\n   * console.log(result.code); // 200\n   * console.log(result.message); // \"Event tracked successfully\"\n   * ```\n   */\n  revenue(revenue: Revenue, eventOptions?: EventOptions): AmplitudeReturn<Result>;\n\n  /**\n   * Sets a new optOut config value. This toggles event tracking on/off.\n   *\n   *```typescript\n   * // Stops tracking\n   * setOptOut(true);\n   *\n   * // Starts/resumes tracking\n   * setOptOut(false);\n   * ```\n   */\n  setOptOut(optOut: boolean): void;\n\n  /**\n   * Flush all unsent events.\n   *\n   *```typescript\n   * flush();\n   * ```\n   */\n  flush(): AmplitudeReturn<void>;\n}\n"]}