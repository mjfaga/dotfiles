import * as AST from "./ast.js";
import type { Resource, Entry } from "./ast.js";
import { FluentParserStream } from "./stream.js";
export interface FluentParserOptions {
    withSpans?: boolean;
}
export declare class FluentParser {
    withSpans: boolean;
    constructor({ withSpans }?: FluentParserOptions);
    parse(source: string): Resource;
    parseEntry(source: string): Entry;
    getEntryOrJunk(ps: FluentParserStream): AST.Entry;
    getEntry(ps: FluentParserStream): AST.Entry;
    getComment(ps: FluentParserStream): AST.Comments;
    getMessage(ps: FluentParserStream): AST.Message;
    getTerm(ps: FluentParserStream): AST.Term;
    getAttribute(ps: FluentParserStream): AST.Attribute;
    getAttributes(ps: FluentParserStream): Array<AST.Attribute>;
    getIdentifier(ps: FluentParserStream): AST.Identifier;
    getVariantKey(ps: FluentParserStream): AST.Identifier | AST.NumberLiteral;
    getVariant(ps: FluentParserStream, hasDefault?: boolean): AST.Variant;
    getVariants(ps: FluentParserStream): Array<AST.Variant>;
    getDigits(ps: FluentParserStream): string;
    getNumber(ps: FluentParserStream): AST.NumberLiteral;
    maybeGetPattern(ps: FluentParserStream): AST.Pattern | null;
    getPattern(ps: FluentParserStream, isBlock: boolean): AST.Pattern;
    getIndent(ps: FluentParserStream, value: string, start: number): Indent;
    dedent(elements: Array<AST.PatternElement | Indent>, commonIndent: number): Array<AST.PatternElement>;
    getTextElement(ps: FluentParserStream): AST.TextElement;
    getEscapeSequence(ps: FluentParserStream): string;
    getUnicodeEscapeSequence(ps: FluentParserStream, u: string, digits: number): string;
    getPlaceable(ps: FluentParserStream): AST.Placeable;
    getExpression(ps: FluentParserStream): AST.Expression | AST.Placeable;
    getInlineExpression(ps: FluentParserStream): AST.InlineExpression | AST.Placeable;
    getCallArgument(ps: FluentParserStream): AST.InlineExpression | AST.NamedArgument;
    getCallArguments(ps: FluentParserStream): AST.CallArguments;
    getString(ps: FluentParserStream): AST.StringLiteral;
    getLiteral(ps: FluentParserStream): AST.Literal;
}
declare class Indent {
    type: string;
    span: AST.Span;
    value: string;
    constructor(value: string, start: number, end: number);
}
export {};
