"use strict"; function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }




var _chunkP52QPVLLjs = require('../chunk-P52QPVLL.js');

// src/cli/index.ts
var _cac = require('cac'); var _cac2 = _interopRequireDefault(_cac);

// src/cli/commands/export.ts
var _fastglob = require('fast-glob');
var _fs = require('fs');
var _path = require('path');
var _unixify = require('unixify'); var _unixify2 = _interopRequireDefault(_unixify);
var log = console.log.bind(console);
var run = async (flags) => {
  let count = 0;
  for await (const file of _fastglob.stream.call(void 0, _unixify2.default.call(void 0, flags.inDir) + "/**", { ignore: ["**/node_modules", _unixify2.default.call(void 0, flags.outDir)] })) {
    count++;
    const data = await _fs.promises.readFile(file);
    const isVueFile = _path.extname.call(void 0, file.toString()) === ".vue";
    const isFtlFile = _path.extname.call(void 0, file.toString()) === ".ftl";
    if (isVueFile) {
      const vueMessages = _chunkP52QPVLLjs.getMessages2.call(void 0, data.toString());
      for (const { locale, source, messages } of vueMessages) {
        const outputPath = _path.join.call(void 0, flags.outDir, locale, _path.relative.call(void 0, flags.inDir, `${file}.ftl`));
        await _fs.promises.mkdir(_path.dirname.call(void 0, outputPath), { recursive: true });
        if (flags.clean || !_fs.existsSync.call(void 0, outputPath)) {
          await _fs.promises.writeFile(outputPath, source);
        } else {
          const existingFtlData = await _fs.promises.readFile(outputPath);
          const newData = _chunkP52QPVLLjs.merge.call(void 0, existingFtlData.toString(), messages);
          await _fs.promises.writeFile(outputPath, newData);
        }
      }
    } else if (isFtlFile) {
      const fileData = file.toString().split(".");
      const locale = fileData[fileData.length - 2];
      const outputPath = _path.join.call(void 0, flags.outDir, locale, _path.relative.call(void 0, flags.inDir, `${file}`));
      await _fs.promises.mkdir(_path.dirname.call(void 0, outputPath), { recursive: true });
      await _fs.promises.copyFile(file, outputPath);
    }
  }
  log(`Extracted messages from ${count} files`);
};

// src/cli/commands/import.ts




var log2 = console.log.bind(console);
var run2 = async (flags) => {
  let count = 0;
  for await (const file of _fastglob.stream.call(void 0, _unixify2.default.call(void 0, flags.inDir) + "/**", { ignore: ["**/node_modules"] })) {
    count++;
    const fileString = file.toString();
    const fileDirName = _path.dirname.call(void 0, file.toString());
    const vueComponentName = _path.basename.call(void 0, fileString).replace(_path.extname.call(void 0, fileString), "");
    const outputPath = _path.join.call(void 0, _path.relative.call(void 0, flags.inDir, fileDirName), vueComponentName);
    const [locale, ...rest] = outputPath.split(_path.sep);
    const realOutputPath = _path.join.call(void 0, flags.outDir, rest.join(_path.sep));
    const data = await _fs.promises.readFile(file);
    const ftlMessages = _chunkP52QPVLLjs.getMessages.call(void 0, data.toString());
    if (checkExistingFtlFile(file.toString())) {
      const existingFtlData = await _fs.promises.readFile(realOutputPath + ".ftl");
      const newData = _chunkP52QPVLLjs.merge.call(void 0, existingFtlData.toString(), ftlMessages);
      await _fs.promises.writeFile(realOutputPath + ".ftl", newData);
    } else {
      const vueFile = await _fs.promises.readFile(realOutputPath);
      const newData = _chunkP52QPVLLjs.merge2.call(void 0, vueFile.toString(), locale, ftlMessages);
      await _fs.promises.writeFile(realOutputPath, newData);
    }
  }
  log2(`Imported messages to ${count} files`);
};
var checkExistingFtlFile = (file) => {
  const fileData = file.split(".");
  const locale = fileData[fileData.length - 2];
  return _path.extname.call(void 0, file) === ".ftl" && locale !== "vue";
};

// src/cli/index.ts
var cli = _cac2.default.call(void 0, "fluent-vue");
cli.command("export", "Exports translation from Vue.js SFC files into ftl files and copy existing ftl files.").option("--in-dir", "Input directory with vue files", { default: "example/" }).option("--out-dir", "Output directory for extracted ftl files", { default: "translations/" }).option("--clean", "Whether to clean output directory", { default: true }).action(run);
cli.command("import", "Import translation from ftl files into Vue.js SFC and merge existing ftl files.").option("--in-dir", "Input directory with ftl files", { default: "translations/" }).option("--out-dir", "Output directory for extracted vue files", { default: "example/" }).action(run2);
cli.help();
cli.parse();
